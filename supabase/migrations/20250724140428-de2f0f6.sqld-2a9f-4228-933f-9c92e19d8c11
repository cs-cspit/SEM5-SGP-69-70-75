
-- Create enum types for better data consistency
CREATE TYPE order_status AS ENUM ('pending', 'preparing', 'ready', 'completed', 'cancelled', 'held');
CREATE TYPE order_type AS ENUM ('dine-in', 'takeaway', 'delivery', 'advance-order');
CREATE TYPE payment_method AS ENUM ('cash', 'card', 'upi');
CREATE TYPE payment_status AS ENUM ('pending', 'paid', 'refunded');
CREATE TYPE advance_order_status AS ENUM ('pending', 'confirmed', 'ready', 'delivered');
CREATE TYPE user_role AS ENUM ('admin', 'staff');

-- Create profiles table for user management
CREATE TABLE public.profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  full_name TEXT NOT NULL,
  username TEXT UNIQUE,
  role user_role NOT NULL DEFAULT 'staff',
  phone TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create menu_items table
CREATE TABLE public.menu_items (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  category TEXT NOT NULL,
  price DECIMAL(10,2) NOT NULL CHECK (price > 0),
  description TEXT,
  in_stock BOOLEAN DEFAULT true,
  stock_quantity INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create orders table
CREATE TABLE public.orders (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  order_number TEXT UNIQUE NOT NULL,
  customer_name TEXT,
  customer_phone TEXT,
  table_number TEXT,
  order_type order_type NOT NULL DEFAULT 'dine-in',
  status order_status NOT NULL DEFAULT 'pending',
  total_amount DECIMAL(10,2) NOT NULL CHECK (total_amount >= 0),
  tax_amount DECIMAL(10,2) DEFAULT 0,
  discount_amount DECIMAL(10,2) DEFAULT 0,
  payment_method payment_method,
  payment_status payment_status DEFAULT 'pending',
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create order_items table for order line items
CREATE TABLE public.order_items (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  order_id UUID REFERENCES public.orders(id) ON DELETE CASCADE,
  menu_item_id INTEGER REFERENCES public.menu_items(id),
  quantity INTEGER NOT NULL CHECK (quantity > 0),
  unit_price DECIMAL(10,2) NOT NULL CHECK (unit_price > 0),
  total_price DECIMAL(10,2) NOT NULL CHECK (total_price >= 0),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create advance_orders table
CREATE TABLE public.advance_orders (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  customer_name TEXT NOT NULL,
  customer_phone TEXT NOT NULL,
  customer_email TEXT,
  delivery_date DATE NOT NULL,
  delivery_time TIME,
  total_amount DECIMAL(10,2) NOT NULL CHECK (total_amount >= 0),
  advance_amount DECIMAL(10,2) DEFAULT 0,
  remaining_amount DECIMAL(10,2) DEFAULT 0,
  status advance_order_status DEFAULT 'pending',
  special_instructions TEXT,
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create advance_order_items table
CREATE TABLE public.advance_order_items (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  advance_order_id UUID REFERENCES public.advance_orders(id) ON DELETE CASCADE,
  menu_item_id INTEGER REFERENCES public.menu_items(id),
  quantity INTEGER NOT NULL CHECK (quantity > 0),
  unit_price DECIMAL(10,2) NOT NULL CHECK (unit_price > 0),
  total_price DECIMAL(10,2) NOT NULL CHECK (total_price >= 0),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create held_orders table
CREATE TABLE public.held_orders (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  original_order_id UUID REFERENCES public.orders(id) ON DELETE CASCADE,
  held_by UUID REFERENCES auth.users(id),
  held_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  reason TEXT,
  recalled_at TIMESTAMP WITH TIME ZONE,
  recalled_by UUID REFERENCES auth.users(id)
);

-- Create system_settings table
CREATE TABLE public.system_settings (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  store_name TEXT NOT NULL,
  store_address TEXT,
  store_phone TEXT,
  store_email TEXT,
  gst_number TEXT,
  enable_gst BOOLEAN DEFAULT false,
  cgst_rate DECIMAL(5,2) DEFAULT 0,
  sgst_rate DECIMAL(5,2) DEFAULT 0,
  igst_rate DECIMAL(5,2) DEFAULT 0,
  updated_by UUID REFERENCES auth.users(id),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create notifications table
CREATE TABLE public.notifications (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  type TEXT NOT NULL CHECK (type IN ('info', 'warning', 'error', 'success')),
  title TEXT NOT NULL,
  message TEXT NOT NULL,
  is_read BOOLEAN DEFAULT false,
  recipient_role user_role,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  expires_at TIMESTAMP WITH TIME ZONE
);

-- Insert default menu items
INSERT INTO public.menu_items (name, category, price, description) VALUES
('Classic Vanilla Bean', 'Ice Cream Scoops', 3.50, 'Creamy vanilla ice cream, a timeless favorite'),
('Chocolate Fudge Blast', 'Ice Cream Scoops', 6.25, 'Rich chocolate ice cream with fudge chunks'),
('Strawberry Swirl Sundae', 'Sundaes', 8.50, 'Fresh strawberry ice cream with syrup swirls'),
('Mint Chip Delight', 'Ice Cream Scoops', 3.75, 'Refreshing mint ice cream with chocolate chips'),
('Caramel Crunch Cone', 'Ice Cream Scoops', 4.50, 'Caramel ice cream in a waffle cone with nuts'),
('Rocky Road Supreme', 'Ice Cream Scoops', 7.25, 'Chocolate ice cream with marshmallows and nuts'),
('Vanilla Milkshake', 'Shakes', 5.25, 'Creamy vanilla milkshake'),
('Chocolate Milkshake', 'Shakes', 5.50, 'Rich chocolate milkshake'),
('Hot Fudge Sundae', 'Sundaes', 8.25, 'Hot fudge over vanilla ice cream'),
('Banana Split', 'Sundaes', 9.50, 'Classic banana split with three scoops'),
('Chocolate Chips', 'Toppings', 0.75, 'Premium chocolate chips'),
('Whipped Cream', 'Toppings', 0.50, 'Fresh whipped cream'),
('Cherry', 'Toppings', 0.25, 'Maraschino cherry'),
('Nuts', 'Toppings', 1.00, 'Mixed nuts'),
('Hot Chocolate', 'Beverages', 3.50, 'Rich hot chocolate'),
('Cold Coffee', 'Beverages', 4.00, 'Iced coffee'),
('Fresh Juice', 'Beverages', 3.25, 'Fresh fruit juice');

-- Insert default system settings
INSERT INTO public.system_settings (store_name, store_address, store_phone, store_email) VALUES
('Savaliya Ice Cream', '123 Main Street, City', '+91 9876543210', 'info@savaliyaicecream.com');

-- Enable Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.menu_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.order_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.advance_orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.advance_order_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.held_orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.system_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for profiles
CREATE POLICY "Users can view own profile" ON public.profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

-- Create RLS policies for menu_items (readable by all authenticated users)
CREATE POLICY "Menu items are viewable by authenticated users" ON public.menu_items
  FOR SELECT TO authenticated USING (true);

CREATE POLICY "Admins can manage menu items" ON public.menu_items
  FOR ALL TO authenticated USING (
    EXISTS (SELECT 1 FROM public.profiles WHERE id = auth.uid() AND role = 'admin')
  );

-- Create RLS policies for orders
CREATE POLICY "Orders are viewable by authenticated users" ON public.orders
  FOR SELECT TO authenticated USING (true);

CREATE POLICY "Authenticated users can create orders" ON public.orders
  FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Authenticated users can update orders" ON public.orders
  FOR UPDATE TO authenticated USING (true);

-- Create RLS policies for order_items
CREATE POLICY "Order items are viewable by authenticated users" ON public.order_items
  FOR SELECT TO authenticated USING (true);

CREATE POLICY "Authenticated users can manage order items" ON public.order_items
  FOR ALL TO authenticated USING (true);

-- Create RLS policies for advance_orders
CREATE POLICY "Advance orders are viewable by authenticated users" ON public.advance_orders
  FOR SELECT TO authenticated USING (true);

CREATE POLICY "Authenticated users can manage advance orders" ON public.advance_orders
  FOR ALL TO authenticated USING (true);

-- Create RLS policies for advance_order_items
CREATE POLICY "Advance order items are viewable by authenticated users" ON public.advance_order_items
  FOR SELECT TO authenticated USING (true);

CREATE POLICY "Authenticated users can manage advance order items" ON public.advance_order_items
  FOR ALL TO authenticated USING (true);

-- Create RLS policies for held_orders
CREATE POLICY "Held orders are viewable by authenticated users" ON public.held_orders
  FOR SELECT TO authenticated USING (true);

CREATE POLICY "Authenticated users can manage held orders" ON public.held_orders
  FOR ALL TO authenticated USING (true);

-- Create RLS policies for system_settings
CREATE POLICY "System settings are viewable by authenticated users" ON public.system_settings
  FOR SELECT TO authenticated USING (true);

CREATE POLICY "Admins can manage system settings" ON public.system_settings
  FOR ALL TO authenticated USING (
    EXISTS (SELECT 1 FROM public.profiles WHERE id = auth.uid() AND role = 'admin')
  );

-- Create RLS policies for notifications
CREATE POLICY "Notifications are viewable by authenticated users" ON public.notifications
  FOR SELECT TO authenticated USING (true);

CREATE POLICY "Admins can manage notifications" ON public.notifications
  FOR ALL TO authenticated USING (
    EXISTS (SELECT 1 FROM public.profiles WHERE id = auth.uid() AND role = 'admin')
  );

-- Create function to handle new user registration
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, username, role)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'full_name', 'New User'),
    COALESCE(NEW.raw_user_meta_data->>'username', NEW.email),
    'staff'
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for new user registration
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Create function to generate order numbers
CREATE OR REPLACE FUNCTION public.generate_order_number()
RETURNS TEXT AS $$
DECLARE
  order_date TEXT;
  order_count INTEGER;
  order_number TEXT;
BEGIN
  order_date := TO_CHAR(NOW(), 'YYYYMMDD');
  
  SELECT COUNT(*) INTO order_count
  FROM public.orders
  WHERE order_number LIKE order_date || '%';
  
  order_number := order_date || LPAD((order_count + 1)::TEXT, 4, '0');
  
  RETURN order_number;
END;
$$ LANGUAGE plpgsql;

-- Create indexes for better performance
CREATE INDEX idx_orders_created_at ON public.orders(created_at);
CREATE INDEX idx_orders_status ON public.orders(status);
CREATE INDEX idx_orders_order_type ON public.orders(order_type);
CREATE INDEX idx_advance_orders_delivery_date ON public.advance_orders(delivery_date);
CREATE INDEX idx_menu_items_category ON public.menu_items(category);
